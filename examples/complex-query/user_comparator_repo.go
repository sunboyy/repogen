// Code generated by repogen. DO NOT EDIT.
package main

import (
	"context"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func NewUserComparatorRepository(collection *mongo.Collection) UserComparatorRepository {
	return &UserComparatorRepositoryMongo{
		collection: collection,
	}
}

type UserComparatorRepositoryMongo struct {
	collection *mongo.Collection
}

func (r *UserComparatorRepositoryMongo) FindByUsername(arg0 context.Context, arg1 string) (*UserModel, error) {
	var entity UserModel
	if err := r.collection.FindOne(arg0, bson.M{
		"username": arg1,
	}, options.FindOne().SetSort(bson.M{})).Decode(&entity); err != nil {
		return nil, err
	}
	return &entity, nil
}

func (r *UserComparatorRepositoryMongo) FindByAgeGreaterThan(arg0 context.Context, arg1 int) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"age": bson.M{
			"$gt": arg1,
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByAgeGreaterThanEqual(arg0 context.Context, arg1 int) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"age": bson.M{
			"$gte": arg1,
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByAgeLessThan(arg0 context.Context, arg1 int) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"age": bson.M{
			"$lt": arg1,
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByAgeLessThanEqual(arg0 context.Context, arg1 int) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"age": bson.M{
			"$lte": arg1,
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByAgeBetween(arg0 context.Context, arg1 int, arg2 int) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"age": bson.M{
			"$gte": arg1,
			"$lte": arg2,
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByCityNot(arg0 context.Context, arg1 string) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"city": bson.M{
			"$ne": arg1,
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByCityIn(arg0 context.Context, arg1 []string) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"city": bson.M{
			"$in": arg1,
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByCityNotIn(arg0 context.Context, arg1 []string) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"city": bson.M{
			"$nin": arg1,
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByBannedTrue(arg0 context.Context) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"banned": true,
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByBannedFalse(arg0 context.Context) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"banned": false,
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	entities := []*UserModel{}
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserComparatorRepositoryMongo) FindByContactExists(arg0 context.Context) (*UserModel, error) {
	var entity UserModel
	if err := r.collection.FindOne(arg0, bson.M{
		"contact": bson.M{
			"$exists": 1,
		},
	}, options.FindOne().SetSort(bson.M{})).Decode(&entity); err != nil {
		return nil, err
	}
	return &entity, nil
}

func (r *UserComparatorRepositoryMongo) FindByContactNotExists(arg0 context.Context) (*UserModel, error) {
	var entity UserModel
	if err := r.collection.FindOne(arg0, bson.M{
		"contact": bson.M{
			"$exists": 0,
		},
	}, options.FindOne().SetSort(bson.M{})).Decode(&entity); err != nil {
		return nil, err
	}
	return &entity, nil
}
