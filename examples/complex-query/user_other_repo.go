// Code generated by repogen. DO NOT EDIT.
package main

import (
	"context"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func NewUserOtherRepository(collection *mongo.Collection) UserOtherRepository {
	return &UserOtherRepositoryMongo{
		collection: collection,
	}
}

type UserOtherRepositoryMongo struct {
	collection *mongo.Collection
}

func (r *UserOtherRepositoryMongo) FindByContactEmail(arg0 context.Context, arg1 string) (*UserModel, error) {
	var entity UserModel
	if err := r.collection.FindOne(arg0, bson.M{
		"contact.email": arg1,
	}, options.FindOne().SetSort(bson.M{})).Decode(&entity); err != nil {
		return nil, err
	}
	return &entity, nil
}

func (r *UserOtherRepositoryMongo) FindByAgeAndCity(arg0 context.Context, arg1 int, arg2 string) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"$and": []bson.M{
			{
				"age": arg1,
			},
			{
				"city": arg2,
			},
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	var entities []*UserModel
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserOtherRepositoryMongo) FindByGenderOrAgeGreaterThan(arg0 context.Context, arg1 Gender, arg2 int) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{
		"$or": []bson.M{
			{
				"gender": arg1,
			},
			{
				"age": bson.M{
					"$gt": arg2,
				},
			},
		},
	}, options.Find().SetSort(bson.M{}))
	if err != nil {
		return nil, err
	}
	var entities []*UserModel
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}

func (r *UserOtherRepositoryMongo) FindTop5AllOrderByAge(arg0 context.Context) ([]*UserModel, error) {
	cursor, err := r.collection.Find(arg0, bson.M{}, options.Find().SetSort(bson.M{
		"age": 1,
	}).SetLimit(5))
	if err != nil {
		return nil, err
	}
	var entities []*UserModel
	if err := cursor.All(arg0, &entities); err != nil {
		return nil, err
	}
	return entities, nil
}
